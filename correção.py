# -*- coding: utf-8 -*-
"""Correção.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GNNzvTPkfk89_On6Aa3VA3xWMWud8oAy
"""

# Importando bibliotecas
import pandas as pd
import matplotlib.pyplot as plt

# Criando um DataFrame fictício
data = {
    'cpf_segurado': [12345678900, 98765432100, 55555555555],
    'nome_segurado': ['João Silva', 'Maria Oliveira', 'Carlos Souza'],
    'data_nascimento_segurado': ['15051980', '23011990', '04121975'],
    'uf_unidade_criacao_tarefa': ['SP', 'RJ', 'MG'],
    'municipio_unidade_criacao_tarefa': ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte'],
    'status_tarefa': ['Concluída', 'Pendente', 'Concluída'],
    'data_entrada_requerimento': ['01072022', '15092023', '20052021'],
    'quantidade_tarefas': [1, 2, 1],
    'no_sg_uf': [12, 21, 31],
    'co_ibge': [123, 456, 789],
    'no_municipio': ['Municipio A', 'Municipio B', 'Municipio C'],
    'situacao_cadastral': ['Cadastrado', 'Não Cadastrado', 'Cadastrado']
}

df = pd.DataFrame(data)

# Estudo de Caso - Manipulação e Análise de Dados

# 1. Porcentagem de cada situação cadastral
nao_cadastrados = df['situacao_cadastral'] == 'Não Cadastrado'
porcentagem_nao_cadastrados = (nao_cadastrados.sum() / len(df)) * 100
print(f'Porcentagem de registros "Não Cadastrado": {porcentagem_nao_cadastrados:.2f}%')

# 2. Criar uma nova coluna "municipio_preenchido"
df['municipio_preenchido'] = df.apply(lambda row: row['municipio_unidade_criacao_tarefa']
                                      if pd.isnull(row['no_municipio']) else row['no_municipio'], axis=1)

# 3. Corrigir a UF
df['UF_preenchido'] = df.apply(lambda row: row['uf_unidade_criacao_tarefa']
                                      if pd.isnull(row['no_sg_uf']) else row['no_sg_uf'], axis=1)

# 4. Contar o número de valores nulos na coluna "UF_preenchido"
num_nulos = df['UF_preenchido'].isnull().sum()
print(f'O número de valores nulos na coluna UF_preenchido é: {num_nulos}')

# 5. Gráfico com a variável "data_entrada_requerimento"
df['data_entrada_requerimento'] = pd.to_datetime(df['data_entrada_requerimento'], format='%d%m%Y')
contagem_por_mes = df.groupby(df['data_entrada_requerimento'].dt.month).size()
contagem_por_mes.plot(kind='bar', xlabel='Mês', ylabel='Quantidade de Requerimentos', title='Requerimentos por Mês')
plt.show()

# 6. Exportar os dados tratados
#df.to_csv('estudo_caso_tratado.csv', index=False)